import openpyxl
from openpyxl.styles import Font, PatternFill, Border, Side
from openpyxl import load_workbook
from datetime import datetime
from tkinter import *
from tkinter import filedialog
import os

light_yellow_fill = PatternFill(start_color='FFFF99', end_color='FFFF99', fill_type='solid')
light_blue_fill = PatternFill(start_color='ADD8E6', end_color='ADD8E6', fill_type='solid')
light_pink_fill = PatternFill(start_color='FFB6C1', end_color='FFB6C1', fill_type='solid')
border = Border(left=Side(style='thin'), right=Side(style='thin'), top=Side(style='thin'), bottom=Side(style='thin'))

root = Tk()
root.withdraw()
source_workbook_path = filedialog.askopenfilename(title="Select a reference file", filetypes=(("Excel files", "*.xlsx"), ("All files", "*.*")))
source_wb = load_workbook(source_workbook_path, data_only=True)
current_date = datetime.now()
currentyear = current_date.strftime('%Y')
current_year_str = current_date.strftime('%y') 
wb = openpyxl.Workbook()
default_font = Font(name='Calibri')
new_sheet = wb.create_sheet(title=f"Emp_leave {currentyear}")

new_sheet.cell(row=3, column=2, value="employee name").fill = light_yellow_fill
new_sheet.cell(row=3, column=3, value="dept.").fill = light_yellow_fill

months_columns = {
    'jan': (4, 5),
    'feb': (6, 7),
    'mar': (8, 9),
    'apr': (10, 11),
    'may': (12, 13),
    'jun': (14, 15),
    'jul': (16, 17),
    'aug': (18, 19),
    'sep': (20, 21),
    'oct': (22, 23),
    'nov': (24, 25),
    'dec': (26, 27)
}

processed_sheets = set()
current_row = 4  

def get_month_from_sheet_name(sheet_name):
    for month in months_columns:
        if month in sheet_name.lower():
            return month
    return None

def copy_row(source_sheet, row, leave_col, sick_col):
    new_sheet.cell(row=current_row, column=2, value=source_sheet.cell(row=row, column=2).value).border=border
    new_sheet.cell(row=current_row, column=3, value=source_sheet.cell(row=row, column=3).value).border=border
    new_sheet.cell(row=current_row, column=leave_col, value=source_sheet.cell(row=row, column=4).value)
    new_sheet.cell(row=current_row, column=sick_col, value=source_sheet.cell(row=row, column=6).value)
    
    return current_row

def find_or_add_row(new_row_value):
    global current_row
    for row in range(4, new_sheet.max_row + 1):
        existing_value_b = new_sheet.cell(row=row, column=2).value
        if existing_value_b == new_row_value:
            return row
    row_to_use = current_row
    current_row += 1
    return row_to_use

last_month_index = -1

for sheet_name in source_wb.sheetnames:
    sheet = source_wb[sheet_name]
    
    if sheet.sheet_state in ['hidden', 'veryHidden']:
        continue

    if current_year_str in sheet_name:
        month = get_month_from_sheet_name(sheet_name)
        if month and sheet_name not in processed_sheets:
            current_month_index = list(months_columns.keys()).index(month)
            
            if current_month_index <= last_month_index:
                continue
            
            processed_sheets.add(sheet_name)
            last_month_index = current_month_index
            currentsheet = source_wb[sheet_name]
            
            leave_col, sick_col = months_columns[month]

            new_sheet.cell(row=2, column=leave_col, value=sheet_name).fill = light_blue_fill
            new_sheet.merge_cells(start_row=2, start_column=leave_col, end_row=2, end_column=sick_col)
            for col in range(leave_col, leave_col + 2):
                new_sheet.cell(row=2, column=col).border = border
            new_sheet.cell(row=2, column=leave_col, value=sheet_name).border = border
            new_sheet.cell(row=3, column=leave_col, value="Leave").fill 
            new_sheet.cell(row=3, column=sick_col, value="Sick").fill 

            for row in range(4, 58):
                source_b_value = currentsheet.cell(row=row, column=2).value
                if source_b_value is not None:
                    existing_row = find_or_add_row(source_b_value)
                    if new_sheet.cell(row=existing_row, column=2).value == source_b_value:
                        new_sheet.cell(row=existing_row, column=leave_col, value=currentsheet.cell(row=row, column=4).value)
                        new_sheet.cell(row=existing_row, column=sick_col, value=currentsheet.cell(row=row, column=6).value)
                    else:
                        copy_row(currentsheet, row, leave_col, sick_col)

            new_sheet.cell(row=3, column=leave_col, value="Leave").fill = light_blue_fill
            new_sheet.cell(row=3, column=sick_col, value="Sick").fill = light_blue_fill
            

annual_leave_col = leave_col + 2
sick_leave_col = sick_col + 2
new_sheet.cell(row=3, column=annual_leave_col, value="Annual leave").fill = light_pink_fill
new_sheet.cell(row=3, column=sick_leave_col, value="Sick leave").fill = light_pink_fill

for row in range(4, current_row+1):
    total_leave = 0
    total_sick = 0

    for month, (leave_col, sick_col) in months_columns.items():
        cell_value = new_sheet.cell(row=row, column=leave_col).value
        if isinstance(cell_value, (int, float)):  
            total_leave += cell_value

    for month, (leave_col, sick_col) in months_columns.items():
        cell_value = new_sheet.cell(row=row, column=sick_col).value
        if isinstance(cell_value, (int, float)):  
            total_sick += cell_value

    new_sheet.cell(row=row, column=annual_leave_col, value=total_leave)
    new_sheet.cell(row=row, column=sick_leave_col, value=total_sick)
    
    new_sheet.cell(row=row, column=annual_leave_col).border = border
    new_sheet.cell(row=row, column=sick_leave_col).border = border
    


for col in range(2, sick_leave_col + 1):
    new_sheet.cell(row=3, column=col).border = border

default_sheet = wb["Sheet"]
wb.remove(default_sheet)

directory = os.path.dirname(source_workbook_path)
file_name_with_extension = os.path.basename(source_workbook_path)
file_name_without_extension = os.path.splitext(file_name_with_extension)[0]
newfilename = f"LEAVE_REPORT_{currentyear}.xlsx"
new_file_path = os.path.join(directory, newfilename)
wb.save(new_file_path)
